# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        
        if root is None and subRoot is None:
            return True
        if root is None or subRoot is None:
            return False 
        
        if root.val == subRoot.val:
            if self.isIdentical(root, subRoot):
                return True
            
        return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)
    
    def isIdentical(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:
        
        if root1 is None and root2 is None:
            return True
        if root1 is None or root2 is None:
            return False 
        
        return root1.val == root2.val and self.isIdentical(root1.left, root2.left) and self.isIdentical(root1.right, root2.right)